# Copyright 2024, Trend Micro
#
# License as per [repo](master/LICENSE)
#
# *********************************************************************
# * Activate the Deep Security Agent (For Linux only)
# *********************************************************************
---
- name: Check if CyberEye Sever Agent file exist - Linux Only
  hosts: unix

  vars:
    ansible_python_interpreter: "/usr/bin/python3"
    myfile: 'opt/ds_agent/dsa_agent'

# As you add agents to Deep Security, they are automatically made available for download through
#   the same hostname:port as the Deep Security Manager admin interface. For Marketplace and software deployments, pass
#   this data through the 'dsm_agent_download_hostname' & 'dsm_agent_download_port' attributes.
    dsm_agent_download_hostname: 192.168.11.111
    dsm_agent_download_port: 4119

# Deep Security agents activate on a different port than the admin interface. For Marketplace and
#    software deployments, 'dsm_agent_activation_hostname' is typically the same as 'dsm_agent_download_hostname'
#    but 'dsm_agent_activation_port' is different than 'dsm_agent_download_port'. For Deep Security
#    as a Service, it's the reverse to make it easy to configure only one outbound port.
    dsm_agent_activation_hostname: 192.168.11.111
    dsm_agent_activation_port: 4120

# Whether to force re-activation even Deep Security Agent has been activated
    force_reactivation: false

  tasks:
# *********************************************************************
# * Check if DSA installed properly
# *********************************************************************
    - debug:
        msg: "Check if CyberEye ServerSec Agent installed properly."

    - stat:
        path: /opt/ds_agent/dsa_query
      register: dsaQuery

    - fail:
        msg:
            - "Could not find command /opt/ds_agent/dsa_query to query DSA certificate."
            - "Please make sure Deep Security Agent has been installed"
      when: dsaQuery.stat.exists != true

# *********************************************************************
# * Check if DSA activated already
# *********************************************************************
    - debug:
        msg: "Check if DSA activated already."

    - set_fact:
        isActivated: false

    - shell: /opt/ds_agent/dsa_query -c GetAgentStatus agentCertHash
      register: certHash
      become: true

    - set_fact:
        isActivated: true
      when: (certHash.stdout | regex_search('(D0:68:DE:48:1B:DC:4D:00:89:07:7F:85:15:20:C5:90:11:EB:56:6A)')) != "D0:68:DE:48:1B:DC:4D:00:89:07:7F:85:15:20:C5:90:11:EB:56:6A"

    - debug:
        msg: 
            - "isActivated: {{ isActivated }}"
            - "Please make sure ServerSecurity Agent has been Activated"

# *********************************************************************
# * Construct dsa_control arguments
# *********************************************************************
    - debug:
        msg: "Construct dsa_control arguments."

    - set_fact:
        dsa_control_argument: "dsm://{{ dsm_agent_activation_hostname }}:{{ dsm_agent_activation_port }}/"

# *********************************************************************
# * Activate DSA when it's not activated or forecd to reactivate
# *********************************************************************
    - debug:
        msg:
            - "Activate DSA when it's not activated or forecd to reactivate."
            - "force_reactivation: {{ force_reactivation }}"

    - shell: "{{ item }}"
      with_items:
        - /opt/ds_agent/dsa_control -r
        - /opt/ds_agent/dsa_control -a {{ dsa_control_argument }}
      when: isActivated != true or force_reactivation != false
      become: true
