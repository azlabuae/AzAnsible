# Copyright 2018, Trend Micro
#
# License as per [repo](master/LICENSE)
#
# *********************************************************************
# * Check the CyberEye Security Agent (For Linux only)
# *********************************************************************
---
- name: Check if CyberEye Sever Agent exist - Linux Only
  hosts: linux

  vars:
    ansible_python_interpreter: "/usr/bin/python3"

# As you add agents to Deep Security, they are automatically made available for download through
#   the same hostname:port as the Deep Security Manager admin interface. For Marketplace and software deployments, pass
#   this data through the 'dsm_agent_download_hostname' & 'dsm_agent_download_port' attributes.
    dsm_agent_download_hostname: 192.168.11.111
    dsm_agent_download_port: 4119

# Deep Security agents activate on a different port than the admin interface. For Marketplace and
#    software deployments, 'dsm_agent_activation_hostname' is typically the same as 'dsm_agent_download_hostname'
#    but 'dsm_agent_activation_port' is different than 'dsm_agent_download_port'. For Deep Security
#    as a Service, it's the reverse to make it easy to configure only one outbound port.
    dsm_agent_activation_hostname: 192.168.11.111
    dsm_agent_activation_port: 4120

# Whether to force re-activation even Deep Security Agent has been activated
    force_reactivation: false

# *********************************************************************
# * Check if CyberEye installed properly
# *********************************************************************
  tasks:
    - stat:
        path: /opt/ds_agent/dsa_query2
      register: dsaQuery

    - name: CyberEye ServerSec Agent installed
      debug:
        msg: "CyberEye ServerSec Agent already installed "
      when: dsaQuery.stat.exists

    - name: Not exists
      when: not dsaQuery.stat.exists
      block:
        # - name: CyberEye NOT Installed
        #   debug:
        #     msg: "CyberEye ServerSec Agent is NOT installed"

        - name: Setting facts (apt) 
          set_fact:
            agent_local_path: /tmp/ds_agent.deb
          when: ansible_pkg_mgr == "apt"

        - name: Setting facts (yum, zypper) 
          set_fact:
            agent_local_path: /tmp/ds_agent.rpm
          when: ansible_pkg_mgr == "yum" or ansible_pkg_mgr == "zypper"

        - name: Setting facts (Amazon Linux) 
          set_fact:
            agent_relative_path: software/agent/amzn1/{{ ansible_architecture }}
          when: (ansible_kernel | regex_search('(amzn1)')) == "amzn1"

        - name: Setting facts (Amazon Linux 2) 
          set_fact:
            agent_relative_path: software/agent/amzn2/{{ ansible_architecture }}
          when: (ansible_kernel | regex_search('(amzn2)')) == "amzn2"  

        - name: Setting facts (CentOS, RHEL) 
          set_fact:
            agent_relative_path: software/agent/RedHat_EL{{ ansible_distribution_major_version }}/{{ ansible_architecture }}
          when: ansible_distribution == "CentOS" or ansible_distribution == "RedHat"

        - name: Setting facts (Debian) 
          set_fact:
            agent_relative_path: software/agent/Debian_{{ ansible_distribution_major_version }}/{{ ansible_architecture }}
          when: ansible_distribution == "Debian"

        - name: Setting facts (Ubuntu) 
          set_fact:
            agent_relative_path: software/agent/Ubuntu_{{ ansible_distribution_major_version }}.04/{{ ansible_architecture }}
          when: ansible_distribution == "Ubuntu"

        - name: Setting facts (SuSE) 
          set_fact:
            agent_relative_path: software/agent/SuSE_{{ ansible_distribution_major_version }}/{{ ansible_architecture }}
          when: ansible_distribution == "SLES"

        - name: Setting facts (CloudLinux)
          set_fact:
            agent_relative_path: software/agent/CloudLinux_{{ ansible_distribution_major_version }}/{{ ansible_architecture }}
          when: ansible_distribution == "CloudLinux"

        - name: Setting facts (OracleLinux)
          set_fact:
            agent_relative_path: software/agent/Oracle_OL{{ ansible_distribution_major_version }}/{{ ansible_architecture }}
          when: ansible_distribution == "OracleLinux"

        - debug: 
            msg: 
              - "agent_local_path: {{ agent_local_path }}"
              - "agent_relative_path: {{ agent_relative_path }}"

        # *********************************************************************
        # * Download Deep Security agent from Deep Security manager
        # *********************************************************************
        - debug:
            msg: "Download from: https://{{ dsm_agent_download_hostname }}:{{ dsm_agent_download_port }}/{{ agent_relative_path }}/"

        - name: Download the Deep Security agent
          get_url: 
            url: "https://{{ dsm_agent_download_hostname }}:{{ dsm_agent_download_port }}/{{ agent_relative_path }}/" 
            dest: "{{ agent_local_path }}"
            validate_certs: no
            timeout: 300
            force: yes

        - stat:
            path: "{{ agent_local_path }}"
          register: agent_file

        - name: Check file size
          debug:
            msg: "Downloaded DSA installer file size : {{ agent_file.stat.size }} bytes"

        - fail:
            msg:
              - "Downloaded file size is not valid. There are two possiblities : 1. The OS platform is not supported. 2. Deep Security Manager don't provide agent software package installer for your OS platform."
              - "Please verify that agent software package for your platform is available using this reference article https://help.deepsecurity.trendmicro.com/Get-Started/Install/import-agent-software.html"
          when: agent_file.stat.size == 0

        # *********************************************************************
        # * Install the agent
        # *********************************************************************
        # Both RPM and DPKG managers will do upgrade if downloaded package version is newer than installed. 
        # If versions are equals, no operation. If older than installed, some managers will throw error.
        - name: Install the Deep Security agent (yum)
          yum: 
            name: "{{ agent_local_path }}"
            state: present
          when: ansible_pkg_mgr == "yum"
          become: true

        - name: Install the Deep Security agent (apt)
          apt: 
            deb: "{{ agent_local_path }}"
            state: present
          when: ansible_pkg_mgr == "apt"
          become: true

        - name: Install the Deep Security agent (zypper)
          zypper: 
            name: "{{ agent_local_path }}"
            state: present
            disable_gpg_check: yes
          when: ansible_pkg_mgr == "zypper"
          become: true

        - name: Make sure the agent has gathered the required metadata
          pause: 
            seconds: 5

        # *********************************************************************
        # * Make sure the service is running
        # *********************************************************************

        # We ignore "[warnning]Consider using service module rather than running service" here because there's no proper service checking function in "Service" module
        - name: Get service 'ds_agent' status 
          shell: "service ds_agent status"
          args: 
            warn: false
          register: result
          become: true

        - name: Check service is on
          fail:
            msg: "Failed to start agent service"
          when: (result.stdout | regex_search('(running)')) != "running"

        - debug:
            msg: "ds_agent package installed successfully"
    # *********************************************************************
    # * Check if DSA activated already
    # *********************************************************************
        - debug:
            msg: "Check if DSA activated already."

        - set_fact:
            isActivated: false

        - shell: /opt/ds_agent/dsa_query -c GetAgentStatus agentCertHash
          register: certHash
          become: true

        - set_fact:
            isActivated: true
          when: (certHash.stdout | regex_search('(D0:68:DE:48:1B:DC:4D:00:89:07:7F:85:15:20:C5:90:11:EB:56:6A)')) != "D0:68:DE:48:1B:DC:4D:00:89:07:7F:85:15:20:C5:90:11:EB:56:6A"

        - debug:
            msg: 
                - "isActivated: {{ isActivated }}"
                - "Please make sure ServerSecurity Agent has been Activated"

    # *********************************************************************
    # * Construct dsa_control arguments
    # *********************************************************************
        - debug:
            msg: "Construct dsa_control arguments."

        - set_fact:
            dsa_control_argument: "dsm://{{ dsm_agent_activation_hostname }}:{{ dsm_agent_activation_port }}/"

    # *********************************************************************
    # * Activate DSA when it's not activated or forecd to reactivate
    # *********************************************************************
        - debug:
            msg:
                - "Activate DSA when it's not activated or forecd to reactivate."
                - "force_reactivation: {{ force_reactivation }}"

        - shell: "{{ item }}"
          with_items:
            - /opt/ds_agent/dsa_control -r
            - /opt/ds_agent/dsa_control -a {{ dsa_control_argument }}
          when: isActivated != true or force_reactivation != false

      become: true
      become_user: root
      ignore_errors: true